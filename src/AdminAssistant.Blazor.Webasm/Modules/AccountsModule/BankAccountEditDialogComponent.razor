@inherits AdminAssistantComponentBase<AdminAssistant.Modules.AccountsModule.UI.IBankAccountEditDialogViewModel>
@using AdminAssistant.Modules.AccountsModule;
@using AdminAssistant.Modules.CoreModule;

<MudDialog>
    <DialogContent>
        <div class="d-flex flex-column py-1">
            <MudButton OnClick="ChangeTitle">Change Title</MudButton>
            <MudButton OnClick="ToggleCloseButton">Toggle Close Button</MudButton>
            <MudButton OnClick="ToggleFullWidth">Toggle Full Width</MudButton>
            <MudButton OnClick="ToggleHeader">Toggle Header</MudButton>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Close">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = new();

    void Close() => MudDialog.Close(DialogResult.Ok(true));

    void ChangeTitle()
    {
        MudDialog.SetTitle("Current time is: " + DateTime.Now);
    }

    void ToggleCloseButton()
    {
        MudDialog.Options.CloseButton = !(MudDialog.Options.CloseButton ?? false);
        MudDialog.SetOptions(MudDialog.Options);
    }

    void ToggleFullWidth()
    {
        MudDialog.Options.FullWidth = !(MudDialog.Options.FullWidth ?? true);
        MudDialog.SetOptions(MudDialog.Options);
    }

    void ToggleHeader()
    {
        MudDialog.Options.NoHeader = !(MudDialog.Options.NoHeader ?? false);
        MudDialog.SetOptions(MudDialog.Options);
    }
}

@*
<SfDialog @bind-Visible="@this.vm.ShowDialog" Width="500px" IsModal="true" ShowCloseIcon="true">
    <DialogTemplates>
        <Header><div id="Accounts_BankAccountEditDialog_Title">@this.vm.HeaderText</div></Header>
        <Content>
            <SfSpinner @ref="this.SfSpinner" Target="#loadingTarget" Label="Loading...." Type="SpinnerType.Fabric" />
            <div id="loadingTarget" class="bank-account-edit-dialog">
                <div class="cl-row1">
                    <label>Account name</label>
                    <div class="account-name">
                        <SfTextBox Value="@this.vm.AccountName" ValueChanged="@((value) => this.vm.OnAccountNameChanged(value))" Placeholder="@this.vm.AccountNameValidationMessage" CssClass="@this.vm.AccountNameValidationClass"></SfTextBox>
                    </div>
                    <SfCheckBox @bind-Checked="@this.vm.IsBudgeted" Label="On budget"></SfCheckBox>
                </div>

                <div class="cl-row2">
                    <label>Account Type</label>
                    <div class="cl-account-type">
                        <SfDropDownList @bind-Value="@this.vm.BankAccountTypeID" OnChange="@(_ => this.vm.OnBankAccountTypeChanged())" TValue="int" TItem="BankAccountType" PopupHeight="230px" Placeholder="Account Type" DataSource="@this.vm.BankAccountTypes">
                            <DropDownListFieldSettings Text="Description" Value="BankAccountTypeID" />
                        </SfDropDownList>
                    </div>
                    <label>Opened On</label>
                    <div class="cl-opened-on">
                        <SfDatePicker @bind-Value="@this.vm.OpenedOn" TValue="DateTime" Format="dd-MMM-yyyy" Placeholder="Opened on" />
                    </div>
                </div>
                <div class="cl-row3">
                    <label>Currency</label>
                    <SfDropDownList @bind-Value="@this.vm.CurrencyID" OnChange="@(_ => this.vm.OnCurrencyChanged())" TValue="int" TItem="Currency" PopupHeight="230px" Placeholder="Currency" DataSource="@this.vm.Currencies">
                        <DropDownListFieldSettings Text="Symbol" Value="CurrencyID" />
                    </SfDropDownList>
                    <div class="cl-label">Opening balance</div>
                        <div class="ui-inputgroup"><span class="ui-inputgroup-addon">$</span><input pInputText type="number" class="cl-opening-balance" [(ngModel)]="NewAccount.Balance"></div>
                </div>
            </div>
        </Content>
    </DialogTemplates>
    <DialogAnimationSettings Effect="@DialogEffect.Zoom" Duration=400 />
    <DialogButtons>
        <DialogButton OnClick="@(_ => this.vm.Cancel.ExecuteAsync(null))" Disabled="@(!this.vm.Cancel.CanExecute(null))" Content="Discard" IconCss="fa fa-lg fa-trash-o" />
        <DialogButton OnClick="@(_ => this.vm.Save.ExecuteAsync(null))" Disabled="@(!this.vm.Save.CanExecute(null))" Content="Save" IconCss="fa fa-lg fa-floppy-o" IsPrimary="true" />
    </DialogButtons>
</SfDialog>*@
