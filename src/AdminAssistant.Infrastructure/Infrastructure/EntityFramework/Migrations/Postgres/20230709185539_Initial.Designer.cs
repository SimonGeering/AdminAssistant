// <auto-generated />
using System;
using AdminAssistant.Infrastructure.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AdminAssistant.Infrastructure.EntityFramework.Migrations.Postgres
{
    [DbContext(typeof(PostgresApplicationDbContext))]
    [Migration("20230709185539_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Accounts.BankAccountEntity", b =>
                {
                    b.Property<int>("BankAccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BankAccountID"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("AuditID")
                        .HasColumnType("integer");

                    b.Property<int>("BankAccountTypeID")
                        .HasColumnType("integer");

                    b.Property<int>("CurrencyID")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentBalance")
                        .HasColumnType("integer");

                    b.Property<bool>("IsBudgeted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("OpenedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OpeningBalance")
                        .HasColumnType("integer");

                    b.Property<int>("OwnerID")
                        .HasColumnType("integer");

                    b.HasKey("BankAccountID");

                    b.HasIndex("AuditID")
                        .IsUnique();

                    b.HasIndex("CurrencyID");

                    b.HasIndex("OwnerID");

                    b.ToTable("BankAccount", "Accounts");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Accounts.BankAccountTransactionEntity", b =>
                {
                    b.Property<int>("BankAccountTransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BankAccountTransactionID"));

                    b.Property<int>("AuditID")
                        .HasColumnType("integer");

                    b.Property<int>("BankAccountID")
                        .HasColumnType("integer");

                    b.Property<int>("BankAccountStatementID")
                        .HasColumnType("integer");

                    b.Property<int>("BankAccountStatementNumber")
                        .HasColumnType("integer");

                    b.Property<int>("BankAccountTransactionTypeID")
                        .HasColumnType("integer");

                    b.Property<int>("Credit")
                        .HasColumnType("integer");

                    b.Property<int>("CurrencyID")
                        .HasColumnType("integer");

                    b.Property<int>("Debit")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsReconciled")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .IsUnicode(true)
                        .HasColumnType("character varying(4000)");

                    b.Property<int>("PayeeID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("BankAccountTransactionID");

                    b.HasIndex("AuditID");

                    b.ToTable("BankAccountTransaction", "Accounts");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Accounts.BankAccountTypeEntity", b =>
                {
                    b.Property<int>("BankAccountTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BankAccountTypeID"));

                    b.Property<bool>("AllowCompany")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("AllowPersonal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeprecated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("BankAccountTypeID");

                    b.ToTable("BankAccountType", "Accounts");

                    b.HasData(
                        new
                        {
                            BankAccountTypeID = 1,
                            AllowCompany = true,
                            AllowPersonal = true,
                            Description = "Current Account",
                            IsDeprecated = false
                        },
                        new
                        {
                            BankAccountTypeID = 2,
                            AllowCompany = true,
                            AllowPersonal = true,
                            Description = "Savings Account",
                            IsDeprecated = false
                        });
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Accounts.BankEntity", b =>
                {
                    b.Property<int>("BankID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BankID"));

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)");

                    b.HasKey("BankID");

                    b.ToTable("Bank", "Accounts");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Accounts.PayeeEntity", b =>
                {
                    b.Property<int>("PayeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PayeeID"));

                    b.Property<int>("AuditID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)");

                    b.HasKey("PayeeID");

                    b.HasIndex("AuditID");

                    b.ToTable("Payee", "Accounts");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.AssetRegister.AssetEntity", b =>
                {
                    b.Property<int>("AssetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AssetID"));

                    b.Property<int>("AuditID")
                        .HasColumnType("integer");

                    b.Property<int>("DepreciatedValue")
                        .HasColumnType("integer");

                    b.Property<int>("ManufacturerID")
                        .HasColumnType("integer");

                    b.Property<int>("OwnerID")
                        .HasColumnType("integer");

                    b.Property<int>("PurchasePrice")
                        .HasColumnType("integer");

                    b.Property<int>("ReplacementCost")
                        .HasColumnType("integer");

                    b.HasKey("AssetID");

                    b.HasIndex("AuditID")
                        .IsUnique();

                    b.HasIndex("OwnerID");

                    b.ToTable("Asset", "AssetRegister");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Budget.BudgetEntity", b =>
                {
                    b.Property<int>("BudgetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BudgetID"));

                    b.Property<int>("AuditID")
                        .HasColumnType("integer");

                    b.Property<string>("BudgetName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("OwnerID")
                        .HasColumnType("integer");

                    b.HasKey("BudgetID");

                    b.HasIndex("AuditID");

                    b.ToTable("Budget", "Budget");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Budget.BudgetEntryEntity", b =>
                {
                    b.Property<int>("BudgetEntryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BudgetEntryID"));

                    b.Property<int>("AuditID")
                        .HasColumnType("integer");

                    b.Property<int>("BudgetID")
                        .HasColumnType("integer");

                    b.HasKey("BudgetEntryID");

                    b.HasIndex("AuditID");

                    b.ToTable("BudgetEntry", "Budget");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Contacts.AddressEntity", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AddressID"));

                    b.Property<int>("AuditID")
                        .HasColumnType("integer");

                    b.HasKey("AddressID");

                    b.HasIndex("AuditID")
                        .IsUnique();

                    b.ToTable("Address", "Contacts");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Contacts.ContactAddressEntity", b =>
                {
                    b.Property<int>("ContactAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ContactAddressID"));

                    b.Property<int>("AddressID")
                        .HasColumnType("integer");

                    b.Property<int>("AuditID")
                        .HasColumnType("integer");

                    b.Property<int>("ContactID")
                        .HasColumnType("integer");

                    b.HasKey("ContactAddressID");

                    b.HasIndex("AuditID");

                    b.ToTable("ContactAddress", "Contacts");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Contacts.ContactEntity", b =>
                {
                    b.Property<int>("ContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ContactID"));

                    b.Property<int>("AuditID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerID")
                        .HasColumnType("integer");

                    b.Property<int>("TitleID")
                        .HasColumnType("integer");

                    b.HasKey("ContactID");

                    b.HasIndex("AuditID");

                    b.HasIndex("OwnerID");

                    b.ToTable("Contact", "Contacts");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.AuditEntity", b =>
                {
                    b.Property<int>("AuditID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AuditID"));

                    b.Property<string>("ArchivedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("ArchivedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AuditID");

                    b.ToTable("Audit", "Core");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.CompanyEntity", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompanyID"));

                    b.Property<int>("AuditID")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("DateOfIncorporation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("UserProfileID")
                        .HasColumnType("integer");

                    b.Property<string>("VATNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)");

                    b.HasKey("CompanyID");

                    b.HasIndex("AuditID")
                        .IsUnique();

                    b.HasIndex("UserProfileID");

                    b.ToTable("Company", "Core");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.CurrencyEntity", b =>
                {
                    b.Property<int>("CurrencyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CurrencyID"));

                    b.Property<string>("DecimalFormat")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("CHAR(5)");

                    b.Property<bool>("IsDeprecated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(true)
                        .HasColumnType("CHAR(3)");

                    b.HasKey("CurrencyID");

                    b.ToTable("Currency", "Core");

                    b.HasData(
                        new
                        {
                            CurrencyID = 1,
                            DecimalFormat = "2.2-2",
                            IsDeprecated = false,
                            Symbol = "GBP"
                        },
                        new
                        {
                            CurrencyID = 2,
                            DecimalFormat = "2.2-2",
                            IsDeprecated = false,
                            Symbol = "EUR"
                        },
                        new
                        {
                            CurrencyID = 3,
                            DecimalFormat = "2.2-2",
                            IsDeprecated = false,
                            Symbol = "USD"
                        });
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.OwnerEntity", b =>
                {
                    b.Property<int>("OwnerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OwnerID"));

                    b.Property<int?>("CompanyID")
                        .HasColumnType("integer");

                    b.Property<int?>("PersonalDetailsID")
                        .HasColumnType("integer");

                    b.HasKey("OwnerID");

                    b.HasIndex("PersonalDetailsID");

                    b.HasIndex("CompanyID", "PersonalDetailsID")
                        .IsUnique();

                    b.ToTable("Owner", "Core");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.PermissionEntity", b =>
                {
                    b.Property<int>("PermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PermissionID"));

                    b.Property<string>("PermissionKey")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("character varying(20)");

                    b.HasKey("PermissionID");

                    b.HasIndex("PermissionKey")
                        .IsUnique();

                    b.ToTable("Permission", "Core");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.PersonalDetailsEntity", b =>
                {
                    b.Property<int>("PersonalDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PersonalDetailsID"));

                    b.Property<int>("AuditID")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileID")
                        .HasColumnType("integer");

                    b.HasKey("PersonalDetailsID");

                    b.HasIndex("AuditID")
                        .IsUnique();

                    b.HasIndex("UserProfileID")
                        .IsUnique();

                    b.ToTable("PersonalDetails", "Core");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.SettingEntity", b =>
                {
                    b.Property<int>("SettingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SettingID"));

                    b.Property<string>("SettingKey")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("character varying(20)");

                    b.HasKey("SettingID");

                    b.HasIndex("SettingKey")
                        .IsUnique();

                    b.ToTable("Setting", "Core");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.UserProfileEntity", b =>
                {
                    b.Property<int>("UserProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserProfileID"));

                    b.Property<int>("AuditID")
                        .HasColumnType("integer");

                    b.Property<string>("MSGraphID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SignOn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("character varying(50)");

                    b.HasKey("UserProfileID");

                    b.HasIndex("AuditID")
                        .IsUnique();

                    b.HasIndex("SignOn")
                        .IsUnique();

                    b.ToTable("UserProfile", "Core");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.UserProfilePermissionEntity", b =>
                {
                    b.Property<int>("UserProfilePermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserProfilePermissionID"));

                    b.Property<int>("PermissionID")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileID")
                        .HasColumnType("integer");

                    b.HasKey("UserProfilePermissionID");

                    b.HasIndex("PermissionID");

                    b.HasIndex("UserProfileID", "PermissionID")
                        .IsUnique();

                    b.ToTable("UserProfilePermission", "Core");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.UserProfileSettingEntity", b =>
                {
                    b.Property<int>("UserProfileSettingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserProfileSettingID"));

                    b.Property<int>("SettingID")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileID")
                        .HasColumnType("integer");

                    b.HasKey("UserProfileSettingID");

                    b.HasIndex("SettingID");

                    b.HasIndex("UserProfileID", "SettingID")
                        .IsUnique();

                    b.ToTable("UserProfileSetting", "Core");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Documents.DocumentEntity", b =>
                {
                    b.Property<int>("DocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DocumentID"));

                    b.Property<int>("AuditID")
                        .HasColumnType("integer");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("OwnerID")
                        .HasColumnType("integer");

                    b.HasKey("DocumentID");

                    b.HasIndex("AuditID");

                    b.ToTable("Document", "Documents");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Accounts.BankAccountEntity", b =>
                {
                    b.HasOne("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.AuditEntity", "Audit")
                        .WithOne("BankAccount")
                        .HasForeignKey("AdminAssistant.Infra.DAL.EntityFramework.Model.Accounts.BankAccountEntity", "AuditID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.CurrencyEntity", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.OwnerEntity", "Owner")
                        .WithMany("BankAccounts")
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Audit");

                    b.Navigation("Currency");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Accounts.BankAccountTransactionEntity", b =>
                {
                    b.HasOne("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.AuditEntity", "Audit")
                        .WithMany()
                        .HasForeignKey("AuditID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Accounts.PayeeEntity", b =>
                {
                    b.HasOne("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.AuditEntity", "Audit")
                        .WithMany()
                        .HasForeignKey("AuditID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.AssetRegister.AssetEntity", b =>
                {
                    b.HasOne("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.AuditEntity", "Audit")
                        .WithOne("Asset")
                        .HasForeignKey("AdminAssistant.Infra.DAL.EntityFramework.Model.AssetRegister.AssetEntity", "AuditID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.OwnerEntity", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Audit");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Budget.BudgetEntity", b =>
                {
                    b.HasOne("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.AuditEntity", "Audit")
                        .WithMany()
                        .HasForeignKey("AuditID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Budget.BudgetEntryEntity", b =>
                {
                    b.HasOne("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.AuditEntity", "Audit")
                        .WithMany()
                        .HasForeignKey("AuditID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Contacts.AddressEntity", b =>
                {
                    b.HasOne("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.AuditEntity", "Audit")
                        .WithOne("Address")
                        .HasForeignKey("AdminAssistant.Infra.DAL.EntityFramework.Model.Contacts.AddressEntity", "AuditID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Contacts.ContactAddressEntity", b =>
                {
                    b.HasOne("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.AuditEntity", "Audit")
                        .WithMany()
                        .HasForeignKey("AuditID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Contacts.ContactEntity", b =>
                {
                    b.HasOne("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.AuditEntity", "Audit")
                        .WithMany()
                        .HasForeignKey("AuditID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.OwnerEntity", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Audit");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.CompanyEntity", b =>
                {
                    b.HasOne("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.AuditEntity", "Audit")
                        .WithOne("Company")
                        .HasForeignKey("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.CompanyEntity", "AuditID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.UserProfileEntity", "UserProfile")
                        .WithMany("Companies")
                        .HasForeignKey("UserProfileID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Audit");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.OwnerEntity", b =>
                {
                    b.HasOne("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.CompanyEntity", "Company")
                        .WithMany("Owns")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.PersonalDetailsEntity", "PersonalDetails")
                        .WithMany("Owns")
                        .HasForeignKey("PersonalDetailsID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("PersonalDetails");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.PersonalDetailsEntity", b =>
                {
                    b.HasOne("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.AuditEntity", "Audit")
                        .WithOne("PersonalDetails")
                        .HasForeignKey("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.PersonalDetailsEntity", "AuditID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.UserProfileEntity", "UserProfile")
                        .WithOne("PersonalDetails")
                        .HasForeignKey("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.PersonalDetailsEntity", "UserProfileID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Audit");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.UserProfileEntity", b =>
                {
                    b.HasOne("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.AuditEntity", "Audit")
                        .WithOne("UserProfile")
                        .HasForeignKey("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.UserProfileEntity", "AuditID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.UserProfilePermissionEntity", b =>
                {
                    b.HasOne("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.PermissionEntity", "Permission")
                        .WithMany("UserProfilePermissions")
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.UserProfileEntity", "UserProfile")
                        .WithMany("Permissions")
                        .HasForeignKey("UserProfileID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.UserProfileSettingEntity", b =>
                {
                    b.HasOne("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.SettingEntity", "Setting")
                        .WithMany("UserProfileSettings")
                        .HasForeignKey("SettingID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.UserProfileEntity", "UserProfile")
                        .WithMany("Settings")
                        .HasForeignKey("UserProfileID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Setting");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Documents.DocumentEntity", b =>
                {
                    b.HasOne("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.AuditEntity", "Audit")
                        .WithMany()
                        .HasForeignKey("AuditID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Audit");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.AuditEntity", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Asset")
                        .IsRequired();

                    b.Navigation("BankAccount")
                        .IsRequired();

                    b.Navigation("Company")
                        .IsRequired();

                    b.Navigation("PersonalDetails")
                        .IsRequired();

                    b.Navigation("UserProfile")
                        .IsRequired();
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.CompanyEntity", b =>
                {
                    b.Navigation("Owns");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.OwnerEntity", b =>
                {
                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.PermissionEntity", b =>
                {
                    b.Navigation("UserProfilePermissions");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.PersonalDetailsEntity", b =>
                {
                    b.Navigation("Owns");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.SettingEntity", b =>
                {
                    b.Navigation("UserProfileSettings");
                });

            modelBuilder.Entity("AdminAssistant.Infra.DAL.EntityFramework.Model.Core.UserProfileEntity", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Permissions");

                    b.Navigation("PersonalDetails")
                        .IsRequired();

                    b.Navigation("Settings");
                });
#pragma warning restore 612, 618
        }
    }
}
