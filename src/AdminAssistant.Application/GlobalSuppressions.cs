// This file is used by Code Analysis to maintain SuppressMessage
// attributes that are applied to this project.
// Project-level suppressions either have no target or are given
// a specific target and scoped to a namespace, type, member, etc.

using System.Diagnostics.CodeAnalysis;

[assembly: SuppressMessage("Major Bug", "S3343:Caller information parameters should come at the end of the parameter list", Justification = "False  positive - not possible due to param array.", Scope = "member", Target = "~M:AdminAssistant.Infra.Providers.ILoggingProvider.Start(System.String,System.String,System.String,System.Int32,System.Object[])")]
[assembly: SuppressMessage("Major Bug", "S3343:Caller information parameters should come at the end of the parameter list", Justification = "False  positive - not possible due to param array.", Scope = "member", Target = "~M:AdminAssistant.Infra.Providers.ILoggingProvider.Finish(System.String,System.String,System.String,System.Int32,System.Object[])")]
[assembly: SuppressMessage("Major Bug", "S3343:Caller information parameters should come at the end of the parameter list", Justification = "False  positive - not possible due to param array.", Scope = "member", Target = "~M:AdminAssistant.Infra.Providers.ILoggingProvider.Finish``1(``0,System.String,System.String,System.String,System.Int32,System.Object[])~``0")]
[assembly: SuppressMessage("Minor Code Smell", "S2094:Classes should not be empty", Justification = "False positive - MediatR implementation", Scope = "type", Target = "~T:AdminAssistant.DomainModel.Modules.AccountsModule.CQRS.BankQuery")]
[assembly: SuppressMessage("Minor Code Smell", "S2094:Classes should not be empty", Justification = "False positive - MediatR implementation", Scope = "type", Target = "~T:AdminAssistant.DomainModel.Modules.AccountsModule.CQRS.BankAccountTypesQuery")]
[assembly: SuppressMessage("Minor Code Smell", "S2094:Classes should not be empty", Justification = "False positive - MediatR implementation", Scope = "type", Target = "~T:AdminAssistant.DomainModel.Modules.ContactsModule.CQRS.ContactQuery")]
[assembly: SuppressMessage("Minor Code Smell", "S2094:Classes should not be empty", Justification = "False positive - MediatR implementation", Scope = "type", Target = "~T:AdminAssistant.DomainModel.Modules.CalendarModule.CQRS.ReminderQuery")]
[assembly: SuppressMessage("Minor Code Smell", "S2094:Classes should not be empty", Justification = "False positive - MediatR implementation", Scope = "type", Target = "~T:AdminAssistant.DomainModel.Modules.AssetRegisterModule.CQRS.AssetQuery")]
[assembly: SuppressMessage("Minor Code Smell", "S2094:Classes should not be empty", Justification = "False positive - MediatR implementation", Scope = "type", Target = "~T:AdminAssistant.DomainModel.Modules.CoreModule.CQRS.CurrenciesQuery")]
[assembly: SuppressMessage("Minor Code Smell", "S2094:Classes should not be empty", Justification = "False positive - MediatR implementation", Scope = "type", Target = "~T:AdminAssistant.DomainModel.Modules.DocumentsModule.CQRS.DocumentQuery")]
[assembly: SuppressMessage("Minor Code Smell", "S2094:Classes should not be empty", Justification = "False positive - MediatR implementation", Scope = "type", Target = "~T:AdminAssistant.DomainModel.Modules.MailModule.CQRS.MailMessageQuery")]
[assembly: SuppressMessage("Minor Code Smell", "S2094:Classes should not be empty", Justification = "False positive - MediatR implementation", Scope = "type", Target = "~T:AdminAssistant.DomainModel.Modules.TasksModule.CQRS.TaskListQuery")]
[assembly: SuppressMessage("Minor Code Smell", "S2094:Classes should not be empty", Justification = "False positive - MediatR implementation", Scope = "type", Target = "~T:AdminAssistant.DomainModel.Modules.BudgetModule.CQRS.BudgetQuery")]
[assembly: SuppressMessage("Style", "IDE0046:Convert to conditional expression", Justification = "Reviewed - Prefer readability of the verbose form", Scope = "member", Target = "~M:AdminAssistant.DomainModel.Modules.AccountsModule.CQRS.BankAccountByIDQueryHandler.Handle(AdminAssistant.DomainModel.Modules.AccountsModule.CQRS.BankAccountByIDQuery,System.Threading.CancellationToken)~System.Threading.Tasks.Task{Ardalis.Result.Result{AdminAssistant.DomainModel.Modules.AccountsModule.BankAccount}}")]
[assembly: SuppressMessage("Style", "IDE0046:Convert to conditional expression", Justification = "Reviewed - Prefer readability of the verbose form", Scope = "member", Target = "~M:AdminAssistant.DomainModel.Modules.AccountsModule.CQRS.BankByIDQueryHandler.Handle(AdminAssistant.DomainModel.Modules.AccountsModule.CQRS.BankByIDQuery,System.Threading.CancellationToken)~System.Threading.Tasks.Task{Ardalis.Result.Result{AdminAssistant.DomainModel.Modules.AccountsModule.Bank}}")]
[assembly: SuppressMessage("Style", "IDE0046:Convert to conditional expression", Justification = "Reviewed - Prefer readability of the verbose form", Scope = "member", Target = "~M:AdminAssistant.DomainModel.Modules.ContactsModule.CQRS.ContactByIDQueryHandler.Handle(AdminAssistant.DomainModel.Modules.ContactsModule.CQRS.ContactByIDQuery,System.Threading.CancellationToken)~System.Threading.Tasks.Task{Ardalis.Result.Result{AdminAssistant.DomainModel.Modules.ContactsModule.Contact}}")]
[assembly: SuppressMessage("Style", "IDE0046:Convert to conditional expression", Justification = "Reviewed - Prefer readability of the verbose form", Scope = "member", Target = "~M:AdminAssistant.DomainModel.Modules.AccountsModule.CQRS.BankAccountTransactionsByBankAccountIDQueryHandler.Handle(AdminAssistant.DomainModel.Modules.AccountsModule.CQRS.BankAccountTransactionsByBankAccountIDQuery,System.Threading.CancellationToken)~System.Threading.Tasks.Task{Ardalis.Result.Result{System.Collections.Generic.IEnumerable{AdminAssistant.DomainModel.Modules.AccountsModule.BankAccountTransaction}}}")]
[assembly: SuppressMessage("Style", "IDE0046:Convert to conditional expression", Justification = "Reviewed - Prefer readability of the verbose form", Scope = "member", Target = "~M:AdminAssistant.DomainModel.Modules.CoreModule.CQRS.CurrencyByIDQueryHandler.Handle(AdminAssistant.DomainModel.Modules.CoreModule.CQRS.CurrencyByIDQuery,System.Threading.CancellationToken)~System.Threading.Tasks.Task{Ardalis.Result.Result{AdminAssistant.DomainModel.Modules.CoreModule.Currency}}")]
