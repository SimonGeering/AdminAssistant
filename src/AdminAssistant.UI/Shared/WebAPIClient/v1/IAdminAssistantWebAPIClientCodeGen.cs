//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"

namespace AdminAssistant.UI.Shared.WebAPIClient.v1
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAdminAssistantWebAPIClient
    {
        /// <summary>
        /// Update an existing BankAccount.
        /// </summary>
        /// <returns>Ok - returns the updated BankAccountResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BankAccountResponseDto> PutBankAccountAsync(BankAccountUpdateRequestDto? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing BankAccount.
        /// </summary>
        /// <returns>Ok - returns the updated BankAccountResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BankAccountResponseDto> PutBankAccountAsync(BankAccountUpdateRequestDto? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new BankAccount.
        /// </summary>
        /// <returns>Created - returns the created bank account with its assigned newly ID.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BankAccountResponseDto> PostBankAccountAsync(BankAccountCreateRequestDto? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new BankAccount.
        /// </summary>
        /// <returns>Created - returns the created bank account with its assigned newly ID.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BankAccountResponseDto> PostBankAccountAsync(BankAccountCreateRequestDto? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets the BankAccountResponseDto with the given ID.
        /// </summary>
        /// <param name="bankAccountID">The ID of the BankAccount to be returned.</param>
        /// <returns>OK - returns the BankAccount requested.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BankAccountResponseDto> GetBankAccountByIdAsync(int bankAccountID);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the BankAccountResponseDto with the given ID.
        /// </summary>
        /// <param name="bankAccountID">The ID of the BankAccount to be returned.</param>
        /// <returns>OK - returns the BankAccount requested.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BankAccountResponseDto> GetBankAccountByIdAsync(int bankAccountID, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the transactions since the last bank account statement for the BankAccount with the given ID.
        /// </summary>
        /// <param name="bankAccountID">The ID of the BankAccount.</param>
        /// <returns>OK - returns a list of BankAccountTransactionResponseDto.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BankAccountTransactionResponseDto>> GetBankAccountTransactionByBankAccountIDAsync(int bankAccountID);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the transactions since the last bank account statement for the BankAccount with the given ID.
        /// </summary>
        /// <param name="bankAccountID">The ID of the BankAccount.</param>
        /// <returns>OK - returns a list of BankAccountTransactionResponseDto.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BankAccountTransactionResponseDto>> GetBankAccountTransactionByBankAccountIDAsync(int bankAccountID, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Lists the summary info for all the available BankAccounts owned by the logged in user.
        /// </summary>
        /// <returns>Ok - returns a list of BankAccountInfoResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BankAccountInfoResponseDto>> GetBankAccountInfoAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lists the summary info for all the available BankAccounts owned by the logged in user.
        /// </summary>
        /// <returns>Ok - returns a list of BankAccountInfoResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BankAccountInfoResponseDto>> GetBankAccountInfoAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Lists all bank account types supported by the API wherever a BankAccountTypeID can be provided.
        /// </summary>
        /// <returns>Ok - returns a list of BankAccountTypeResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BankAccountTypeResponseDto>> GetBankAccountTypeAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lists all bank account types supported by the API wherever a BankAccountTypeID can be provided.
        /// </summary>
        /// <returns>Ok - returns a list of BankAccountTypeResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BankAccountTypeResponseDto>> GetBankAccountTypeAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update an existing Bank.
        /// </summary>
        /// <returns>Ok - returns the updated BankResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BankResponseDto> PutBankAsync(BankUpdateRequestDto? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing Bank.
        /// </summary>
        /// <returns>Ok - returns the updated BankResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BankResponseDto> PutBankAsync(BankUpdateRequestDto? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new Bank.
        /// </summary>
        /// <returns>Created - returns the created bank with its assigned newly ID.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BankResponseDto> PostBankAsync(BankCreateRequestDto? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new Bank.
        /// </summary>
        /// <returns>Created - returns the created bank with its assigned newly ID.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BankResponseDto> PostBankAsync(BankCreateRequestDto? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Lists all banks.
        /// </summary>
        /// <returns>Ok - returns a list of BankResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BankResponseDto>> GetBankAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lists all banks.
        /// </summary>
        /// <returns>Ok - returns a list of BankResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BankResponseDto>> GetBankAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets the Bank with the given ID.
        /// </summary>
        /// <param name="bankID">The ID of the Bank to be returned.</param>
        /// <returns>OK - returns the Bank requested.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BankResponseDto> GetBankByIdAsync(int bankID);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the Bank with the given ID.
        /// </summary>
        /// <param name="bankID">The ID of the Bank to be returned.</param>
        /// <returns>OK - returns the Bank requested.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BankResponseDto> GetBankByIdAsync(int bankID, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Lists all assets
        /// </summary>
        /// <returns>Ok - returns a list of AssetResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AssetResponseDto>> GetAssetAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lists all assets
        /// </summary>
        /// <returns>Ok - returns a list of AssetResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AssetResponseDto>> GetAssetAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Lists all budgets.
        /// </summary>
        /// <returns>Ok - returns a list of BudgetResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BudgetResponseDto>> GetBudgetAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lists all budgets.
        /// </summary>
        /// <returns>Ok - returns a list of BudgetResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BudgetResponseDto>> GetBudgetAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Lists all reminders.
        /// </summary>
        /// <returns>Ok - returns a list of ReminderResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ReminderResponseDto>> GetReminderAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lists all reminders.
        /// </summary>
        /// <returns>Ok - returns a list of ReminderResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ReminderResponseDto>> GetReminderAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update an existing Contact.
        /// </summary>
        /// <returns>Ok - returns the updated ContactResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContactResponseDto> PutContactAsync(ContactUpdateRequestDto? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing Contact.
        /// </summary>
        /// <returns>Ok - returns the updated ContactResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContactResponseDto> PutContactAsync(ContactUpdateRequestDto? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new Contact.
        /// </summary>
        /// <returns>Created - returns the created Contact with its assigned newly ID.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContactResponseDto> PostContactAsync(ContactCreateRequestDto? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new Contact.
        /// </summary>
        /// <returns>Created - returns the created Contact with its assigned newly ID.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContactResponseDto> PostContactAsync(ContactCreateRequestDto? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Lists all contacts
        /// </summary>
        /// <returns>Ok - returns a list of ContactResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContactResponseDto>> GetContactAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lists all contacts
        /// </summary>
        /// <returns>Ok - returns a list of ContactResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContactResponseDto>> GetContactAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets the Contact with the given ID.
        /// </summary>
        /// <param name="contactId">The ID of the Contact to be returned.</param>
        /// <returns>OK - returns the Contact requested.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContactResponseDto> GetContactByIdAsync(int contactId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the Contact with the given ID.
        /// </summary>
        /// <param name="contactId">The ID of the Contact to be returned.</param>
        /// <returns>OK - returns the Contact requested.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContactResponseDto> GetContactByIdAsync(int contactId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update an existing Currency.
        /// </summary>
        /// <returns>Ok - returns the updated CurrencyResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyResponseDto> PutCurrencyAsync(CurrencyUpdateRequestDto? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an existing Currency.
        /// </summary>
        /// <returns>Ok - returns the updated CurrencyResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyResponseDto> PutCurrencyAsync(CurrencyUpdateRequestDto? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates a new Currency.
        /// </summary>
        /// <returns>Created - returns the created currency with its assigned newly ID.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyResponseDto> PostCurrencyAsync(CurrencyCreateRequestDto? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new Currency.
        /// </summary>
        /// <returns>Created - returns the created currency with its assigned newly ID.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyResponseDto> PostCurrencyAsync(CurrencyCreateRequestDto? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Lists all currencies supported by the API wherever a CurrencyID can be provided.
        /// </summary>
        /// <returns>Ok - returns a list of CurrencyResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CurrencyResponseDto>> GetCurrencyAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lists all currencies supported by the API wherever a CurrencyID can be provided.
        /// </summary>
        /// <returns>Ok - returns a list of CurrencyResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CurrencyResponseDto>> GetCurrencyAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets the Currency with the given ID.
        /// </summary>
        /// <param name="currencyID">The ID of the Currency to be returned.</param>
        /// <returns>OK - returns the Currency requested.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyResponseDto> GetCurrencyByIdAsync(int currencyID);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the Currency with the given ID.
        /// </summary>
        /// <param name="currencyID">The ID of the Currency to be returned.</param>
        /// <returns>OK - returns the Currency requested.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CurrencyResponseDto> GetCurrencyByIdAsync(int currencyID, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Lists all documents.
        /// </summary>
        /// <returns>Ok - returns a list of DocumentResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DocumentResponseDto>> GetDocumentAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lists all documents.
        /// </summary>
        /// <returns>Ok - returns a list of DocumentResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DocumentResponseDto>> GetDocumentAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Lists all mail messages
        /// </summary>
        /// <returns>Ok - returns a list of MailMessageResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MailMessageResponseDto>> GetMailMessageAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lists all mail messages
        /// </summary>
        /// <returns>Ok - returns a list of MailMessageResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MailMessageResponseDto>> GetMailMessageAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Lists all task lists.
        /// </summary>
        /// <returns>Ok - returns a list of TaskListResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TaskListResponseDto>> GetTaskListAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lists all task lists.
        /// </summary>
        /// <returns>Ok - returns a list of TaskListResponseDto</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TaskListResponseDto>> GetTaskListAsync(System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AssetResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("assetID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? AssetID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assetName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AssetName { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BankAccountCreateRequestDto
    {
        /// <summary>
        /// The BankAccountType for this BankAccount.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountTypeID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? BankAccountTypeID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currencyID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CurrencyID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AccountName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("balance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Balance { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isBudgeted")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsBudgeted { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("openingBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? OpeningBalance { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CurrentBalance { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("openedOn")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? OpenedOn { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BankAccountInfoResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? BankAccountID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AccountName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CurrentBalance { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Symbol { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("decimalFormat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DecimalFormat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isBudgeted")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsBudgeted { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BankAccountResponseDto
    {
        /// <summary>
        /// The BankAccount identifier.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? BankAccountID { get; set; } = default!;

        /// <summary>
        /// The BankAccountType for this BankAccount.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountTypeID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? BankAccountTypeID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currencyID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CurrencyID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AccountName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isBudgeted")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsBudgeted { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("openingBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? OpeningBalance { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CurrentBalance { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("openedOn")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? OpenedOn { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BankAccountTransactionResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountTransactionID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? BankAccountTransactionID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? BankAccountID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountTransactionTypeID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? BankAccountTransactionTypeID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountStatementID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? BankAccountStatementID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountStatementNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? BankAccountStatementNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isReconciled")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsReconciled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payeeID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? PayeeID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payeeName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PayeeName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currencyID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CurrencyID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Symbol { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("decimalFormat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DecimalFormat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("credit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? Credit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("debit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? Debit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("balance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? Balance { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Notes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transactionDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TransactionDate { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BankAccountTypeResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountTypeID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? BankAccountTypeID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Description { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BankAccountUpdateRequestDto
    {
        /// <summary>
        /// The BankAccount identifier.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? BankAccountID { get; set; } = default!;

        /// <summary>
        /// The BankAccountType for this BankAccount.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountTypeID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? BankAccountTypeID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currencyID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CurrencyID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AccountName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isBudgeted")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsBudgeted { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("openingBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? OpeningBalance { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentBalance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CurrentBalance { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("openedOn")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? OpenedOn { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BankCreateRequestDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("bankName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BankName { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BankResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("bankID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? BankID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BankName { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BankUpdateRequestDto
    {
        /// <summary>
        /// The Bank identifier.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? BankID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BankName { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BudgetResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("budgetID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? BudgetID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("budgetName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BudgetName { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactCreateRequestDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? FirstName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LastName { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("contactID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? ContactID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? FirstName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LastName { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactUpdateRequestDto
    {
        /// <summary>
        /// The Contact identifier.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contactID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? ContactID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? FirstName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LastName { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrencyCreateRequestDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Symbol { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("decimalFormat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DecimalFormat { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrencyResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("currencyID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CurrencyID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Symbol { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("decimalFormat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DecimalFormat { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CurrencyUpdateRequestDto
    {
        /// <summary>
        /// The Currency identifier.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currencyID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CurrencyID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("symbol")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Symbol { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("decimalFormat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DecimalFormat { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("documentID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? DocumentID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fileName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? FileName { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MailMessageResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("mailMessageID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? MailMessageID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("subject")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Subject { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReminderResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("reminderID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? ReminderID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reminderName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ReminderName { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskListResponseDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("taskListID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? TaskListID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taskListName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TaskListName { get; set; } = default!;

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604